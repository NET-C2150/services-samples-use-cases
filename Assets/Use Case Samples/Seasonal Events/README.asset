%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: bfbabd22c62c640a6ba459d46825055b, type: 3}
  m_Name: README
  m_EditorClassIdentifier: 
  header:
    title: Seasonal Events README
    icon: {fileID: 2800000, guid: 83f0684dab5534e2492f651aaaf4a151, type: 3}
  sections:
  - subHeader1: Intro
    subHeader2: 
    subHeader3: 
    body: 'Seasonal events can increase game sessions and overall interest in a game,
      as they give existing players new and fun content throughout the year to look
      forward to and can entice new players to begin playing. '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'This sample shows how you can set up seasonal events (fall, winter, spring,
      summer) for players in your game with a countdown indicating how much time
      is left in the current event, the currency rewards that can be won during the
      event, and a "Play Challenge" button that, when clicked, opens a popup where
      players can collect their rewards for "winning" the challenge. '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: "Clicking the \"Collect Rewards\" button in the popup will add the rewards
      to a player\u2019s wallet balance, as seen in the currency HUD at the top of
      the scene. Once the countdown on the main screen hits 0, the scene will automatically
      change to the next event. "
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: Implementation Overview
    subHeader2: 
    subHeader3: 
    body: 'When this scene first loads, it will initialize Unity Services and sign
      the player in anonymously using Authentication. This can be seen in the SeasonalEventsSceneManager
      script. Once Unity Services completes initialization, Remote Config is queried
      to get the current values for the event-related keys. These values allow for
      displaying the active event name, the potential rewards for completing the
      event challenge, and the themed background image and play buttons. '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'Remote Config also tells us when the event ends, which is used in the
      CountdownManager for determining and displaying how much time is left in the
      current event. When that time runs out, it triggers a new call to remote config,
      to get the updated values for the next event. '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: "Note: This sample determines which Remote Config campaign data should
      be returned based on the user\u2019s timestamp, to demonstrate how events can
      change and update local variables. This is a simplification. In a real app,
      developers likely set up a campaign to have specific start and end dates, then
      Remote Config determines when the campaign is shown based on the server\u2019s
      date/time. "
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 'When a player clicks "Play Challenge", followed by "Collect Rewards" it
      initiates a call to the Cloud Code script "Grant Event Reward". This script
      calls Remote Config to determine which rewards should be distributed (this
      has the potential to differ from what the player expects, if they''re altering
      their device clock or if they clicked claim right at the very end of an event),
      and then calls Economy to add those rewards to their currency balances. The
      challenge can only be played once per active season, so once the Cloud Code
      script distributes the rewards, it saves the current season name and timestamp
      to Cloud Save. This info is used by the client to determine whether the current
      season''s challenge has already been played, and if it has, to disable the
      "Play Challenge" button. '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: Packages Required
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: 'Authentication: Automatically signs in the user anonymously to keep
        track of their data on the server side. '
      bodyFormat: 0
      bulletList: []
    - body: 'Economy: Keeps track of the player''s currencies. '
      bodyFormat: 0
      bulletList: []
    - body: 'Cloud Code: Keeps important validation logic on the server side. In
        this sample it is used to distribute the rewards for the event challenge
        when the player clicks the "Collect Rewards" button. It independently verifies
        the timestamp at the time of reward distribution on the server-side to confirm
        which event''s rewards should be distributed. '
      bodyFormat: 0
      bulletList: []
    - body: 'Remote Config: Provides key-value pairs where the value that is mapped
        to a given key can be changed on the server-side, either manually or based
        on specific campaigns. In this sample, we use the campaigns feature to create
        the four seasonal events and return different values for certain keys based
        on the campaign.  '
      bodyFormat: 0
      bulletList: []
    - body: 'Addressables: Allows developers to ask for an asset via its address.
        Wherever the asset resides (local or remote), the system will locate it and
        its dependencies, then return it. Here we use it to look up event specific
        images and prefabs based on the information we receive from Remote Config. '
      bodyFormat: 0
      bulletList: []
    - body: 'Analytics: Sends events that allow the tracking of a player''s in-game
        interactions, retention, and other information which can be used for analyzing
        and improving game experience.'
      bodyFormat: 0
      bulletList: []
    - body: 'Cloud Save: Stores if the current season''s challenge has already been
        played to prevent the user from playing the same season''s challenge multiple
        times.'
      bodyFormat: 0
      bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: See the package docs to learn how to install and configure these SDKs in
      your project.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: Authentication
      url: https://docs.unity.com/authentication/Content/InstallAndConfigureSDK.htm
    - linkText: Economy
      url: https://docs.unity.com/economy/Content/implementation.htm?tocpath=Implementation%7C_____0
    - linkText: Cloud Code
      url: https://docs.unity.com//cloud-code/Content/implementation.htm?tocpath=Implementation%7C_____0#SDK_installation
    - linkText: Remote Config
      url: https://docs.unity3d.com/Packages/com.unity.remote-config@2.0/manual/ConfiguringYourProject.html
    - linkText: Addressables
      url: https://docs.unity3d.com/Packages/com.unity.addressables@latest
    - linkText: Analytics
      url: https://docs.unity.com/analytics/SDKInstallation.htm
    - linkText: Cloud Save
      url: https://docs.unity.com/cloud-save/implementation.htm
  - subHeader1: Dashboard Setup
    subHeader2: 
    subHeader3: 
    body: 'To use Economy, Remote Config, and Cloud Code services in your game, activate
      each service for your organization and project in the Unity Dashboard. To duplicate
      this sample scene''s setup on your own dashboard, you''ll need a few currencies
      in the Economy setup, some Config Values and Campaigns set up in Remote Config,
      and a script published in Cloud Code: '
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Economy Items
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: Coin
      bodyFormat: 1
      bulletList:
      - body: A challenge reward during the fall, winter, and spring events
        bodyFormat: 0
        bulletList: []
      - body: 'ID: "COIN"'
        bodyFormat: 0
        bulletList: []
    - body: Gem
      bodyFormat: 1
      bulletList:
      - body: A challenge reward during the winter and summer events
        bodyFormat: 0
        bulletList: []
      - body: 'ID: "GEM"'
        bodyFormat: 0
        bulletList: []
    - body: Pearl
      bodyFormat: 1
      bulletList:
      - body: A challenge reward during the fall and summer events
        bodyFormat: 0
        bulletList: []
      - body: 'ID: "PEARL"'
        bodyFormat: 0
        bulletList: []
    - body: Star
      bodyFormat: 1
      bulletList:
      - body: A challenge reward during the spring and summer events
        bodyFormat: 0
        bulletList: []
      - body: 'ID: "STAR"'
        bodyFormat: 0
        bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Remote Config
    subHeader3: Config Values
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: EVENT_NAME
      bodyFormat: 1
      bulletList:
      - body: The name of the event to display in the scene.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: string'
        bodyFormat: 0
        bulletList: []
      - body: 'Default value: ""'
        bodyFormat: 0
        bulletList: []
    - body: EVENT_KEY
      bodyFormat: 1
      bulletList:
      - body: The key used to look up event-specific values, such as the addresses
          for the specific images.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: string'
        bodyFormat: 0
        bulletList: []
      - body: 'Default value: ""'
        bodyFormat: 0
        bulletList: []
    - body: EVENT_END_TIME
      bodyFormat: 1
      bulletList:
      - body: The last digit that matches in the Audience JEXL statement, i.e. the
          last digit of the latest timestamp that would return this campaign.
        bodyFormat: 0
        bulletList: []
      - body: 'Type: int'
        bodyFormat: 0
        bulletList: []
      - body: 'Default value: 0'
        bodyFormat: 0
        bulletList: []
    - body: CHALLENGE_REWARD
      bodyFormat: 1
      bulletList:
      - body: The json that specifies what rewards are distributed when a challenge
          has been "won".
        bodyFormat: 0
        bulletList: []
      - body: 'Type: json'
        bodyFormat: 0
        bulletList: []
      - body: 'Default value: See markdown README for details'
        bodyFormat: 0
        bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: Campaigns
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: Fall Event
      bodyFormat: 1
      bulletList:
      - body: 'Status: Active'
        bodyFormat: 0
        bulletList: []
      - body: 'Audience: Stateless JEXL'
        bodyFormat: 0
        bulletList:
        - body: '"user.timestampMinutes % 10 == 0 || user.timestampMinutes % 10 ==
            1 || user.timestampMinutes % 10 == 2"'
          bodyFormat: 0
          bulletList: []
      - body: 'Start Date: Immediately'
        bodyFormat: 0
        bulletList: []
      - body: 'End Date: Indefinitely'
        bodyFormat: 0
        bulletList: []
      - body: 'Overrides:'
        bodyFormat: 0
        bulletList:
        - body: 'EVENT_NAME: "Fall Event"'
          bodyFormat: 0
          bulletList: []
        - body: 'EVENT_KEY: "Fall"'
          bodyFormat: 0
          bulletList: []
        - body: 'EVENT_END_TIME: 2'
          bodyFormat: 0
          bulletList: []
        - body: 'CHALLENGE_REWARD: See markdown README for details'
          bodyFormat: 0
          bulletList: []
    - body: Winter Event
      bodyFormat: 1
      bulletList:
      - body: 'Status: Active'
        bodyFormat: 0
        bulletList: []
      - body: 'Audience: Stateless JEXL'
        bodyFormat: 0
        bulletList:
        - body: '"user.timestampMinutes % 10 == 3 || user.timestampMinutes % 10 ==
            4"'
          bodyFormat: 0
          bulletList: []
      - body: 'Start Date: Immediately'
        bodyFormat: 0
        bulletList: []
      - body: 'End Date: Indefinitely'
        bodyFormat: 0
        bulletList: []
      - body: 'Overrides:'
        bodyFormat: 0
        bulletList:
        - body: 'EVENT_NAME: "Winter Event"'
          bodyFormat: 0
          bulletList: []
        - body: 'EVENT_KEY: "Winter"'
          bodyFormat: 0
          bulletList: []
        - body: 'EVENT_END_TIME: 4'
          bodyFormat: 0
          bulletList: []
        - body: 'CHALLENGE_REWARD: See markdown README for details'
          bodyFormat: 0
          bulletList: []
    - body: Spring Event
      bodyFormat: 1
      bulletList:
      - body: 'Status: Active'
        bodyFormat: 0
        bulletList: []
      - body: 'Audience: Stateless JEXL'
        bodyFormat: 0
        bulletList:
        - body: '"user.timestampMinutes % 10 == 5 || user.timestampMinutes % 10 ==
            6 || user.timestampMinutes % 10 == 7"'
          bodyFormat: 0
          bulletList: []
      - body: 'Start Date: Immediately'
        bodyFormat: 0
        bulletList: []
      - body: 'End Date: Indefinitely'
        bodyFormat: 0
        bulletList: []
      - body: 'Overrides:'
        bodyFormat: 0
        bulletList:
        - body: 'EVENT_NAME: "Spring Event"'
          bodyFormat: 0
          bulletList: []
        - body: 'EVENT_KEY: "Spring"'
          bodyFormat: 0
          bulletList: []
        - body: 'EVENT_END_TIME: 7'
          bodyFormat: 0
          bulletList: []
        - body: 'CHALLENGE_REWARD: See markdown README for details'
          bodyFormat: 0
          bulletList: []
    - body: Summer Event
      bodyFormat: 1
      bulletList:
      - body: 'Status: Active'
        bodyFormat: 0
        bulletList: []
      - body: 'Audience: Stateless JEXL'
        bodyFormat: 0
        bulletList:
        - body: '"user.timestampMinutes % 10 == 8 || user.timestampMinutes % 10 ==
            9"'
          bodyFormat: 0
          bulletList: []
      - body: 'Start Date: Immediately'
        bodyFormat: 0
        bulletList: []
      - body: 'End Date: Indefinitely'
        bodyFormat: 0
        bulletList: []
      - body: 'Overrides:'
        bodyFormat: 0
        bulletList:
        - body: 'EVENT_NAME: "Summer Event"'
          bodyFormat: 0
          bulletList: []
        - body: 'EVENT_KEY: "Summer"'
          bodyFormat: 0
          bulletList: []
        - body: 'EVENT_END_TIME: 9'
          bodyFormat: 0
          bulletList: []
        - body: 'CHALLENGE_REWARD: See markdown README for details'
          bodyFormat: 0
          bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Cloud Code Scripts
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: 'GrantEventReward:'
      bodyFormat: 1
      bulletList:
      - body: 'Parameters: `none`'
        bodyFormat: 0
        bulletList: []
      - body: 'Script: "Assets/Use Case Samples/Seasonal Events/Cloud Code/GrantEventReward.js"'
        bodyFormat: 0
        bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 'Note: The Cloud Code scripts included in the "Cloud Code" folder
      are just local copies, since you can''t see the sample''s dashboard. Changes
      to these scripts will not affect the behavior of this sample since they will
      not be automatically uploaded to Cloud Code service.'
    bulletList: []
    linkList: []
